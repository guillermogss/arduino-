
/**********************************************************************************************
                                              LIBRERIAS
***********************************************************************************************/
//Librería para el receptor IR
#include <boarddefs.h>
#include <IRremote.h>
#include <IRremoteInt.h>
#include <ir_Lego_PF_BitStreamEncoder.h>

#include <Wire.h>

//Libreria para el sensor DHT11
#include "DHT.h"

// Librería para el cristal LCD
#include <LiquidCrystal_I2C.h>

//Libreria que controla el Servo
#include <Servo.h>

// Libreria que controla la funcion de la alarma
#include <Ultrasonic.h>


/**********************************************************************************************
                                              VARIABLES
 **********************************************************************************************/

/*Digitales - PWD*/

// Leds-Luces
const byte pinLedCalibra = 12;                  //Para calibración
const byte pinLedLuz = 2;                       // pinLed ap.1


// Ventilador (ventilador)
byte pinVent = 4;                               //pin para ventilador ap.2
//Para la funcion automatica, lo realizaremos con el sensor DHT11


// Enchufes - Rele
const byte pinRelay = 23;                        // pin Rele ap.4


//Slider
const byte pinLedSlider = 3;                    // pinLed ap.3

//Alarma

int pinAviso = 34;                              // pinLed ap. 4
int pinSirena = 35;                             // pin Sirena


/*Analogicas*/

const byte pinLDR = A0;                         //pin analogico para los vaores del LDR


// Variables booleanas

boolean ledLuzAuto = false;                     // pinLed modo funcionamiento false: Manual - true: automatico -> inicalmente manual
boolean ventAuto = false;                       // Pin para el ventilador - false: manual - true: automatico -> inicalmente manual
boolean relayAuto = false;                      // Pin para el enchufe - false: manual - true: automatico -> inicalmente manual
boolean puertaAuto = false;                      // Pin para la puerta - false: cerrado
boolean sirenaAuto = false;                       // Pin para la sirena -

// Variables de las librerias

#define RECV_PIN 11 // pin al que conectamos el receptor de IR
IRrecv irrecv(RECV_PIN);
decode_results results;

#define DHTPIN 22
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

LiquidCrystal_I2C lcd(0x27, 16, 2);

Servo servo;

Ultrasonic ultra (31, 30);     //Pines para sensor Ultrasonido
/********************************* Variables principales de programa*******************************************************************/

char lecturaComando;                            // Variable donde guardamos la lectura del comando
int lecturaValor;                               // Variable donda guardamos el valor de la lectura

/********************************* Variable para imprimir valores - Debug *************************************************************/

boolean debug = true;                           // Activamos o desactivos el debug
boolean debugLedLuz = true;                     // Activamos o desactivamos debug de los LEDS
boolean debugModoLedLuz = true;                 // Activamos o desactivamos el debug del led: Manual/Automatico.
boolean debugValLDR = true;                     // Activamos o desactivamos el debug de los Valores la LDR.
boolean debugCalibraLDR = true;                 // Activamos o desactivamos el debug de la calibracion LDR.
boolean debugVent = true;                       // Activamos o desactivamos el debug del Ventilador: Manual/Automatico
boolean debugTemp = true;                       // Activamos o desactivamos el debug de la temperatura
boolean debugRelay = true;                      // Activamos o desactivamos el debug del Rele
boolean debugPuerta = true;                     // Activamos o desactivamos el debug del Servo
boolean debugAlarma = true;                     // Activamos o desactivamos el debug de la alarma

/********************************** Variables para la configuracion del LDR*************************************************************/

int maxLDR = 0;
int minLDR = 1024;

/****************************************************************************************************************************************
                                                       PROGRAMA PRINCIPAL
*****************************************************************************************************************************************/

// Funciones de configuracion

void setup()
{
  Serial.begin(9600);
  Serial1.begin(9600);                           // Activamos el puerto Serial1 a 9600 baudios
  dht.begin();                                  // Iniciamos sensor DHT
  Wire.begin();
  lcd.backlight();
  lcd.init();
  irrecv.enableIRIn();                          // Comienza a recibir los datos del IR
  configuraPines();                             // Funcion quie configura los pines como Entrada o salida
  calibraLDR();                                 // Funcion para la calibración del

}

// Funcion principal

void loop()
{
  lecturaSerial1();                              // Lectura de comando del Serial y Actuaciones
  fAutomaticas();                               // Realiza las acciones automaticas

}


/*****************************************************************************************************************************************
                                                               FUNCIONES
 *****************************************************************************************************************************************/

// CONFIGURACION

// Funcion de configuracion de pines

void configuraPines()
{
  /* Para las entradas*/

  pinMode(pinLedLuz, INPUT);                      // Fijamos pin de entrada para el LDR
  pinMode (pinVent, INPUT);                       // Fijamos pin de entrada para el LDR

  /*Para las salidas*/

  pinMode(pinLedLuz, OUTPUT);                     // Configuramos pin Luz como salida
  digitalWrite(pinLedLuz, LOW);                   // Iniciamos el Led Luz como OFF


  pinMode(pinLedCalibra, OUTPUT);                 // Pin de calibrado del LDR
  digitalWrite (pinLedCalibra, LOW);              //Inicia el led de calibraco apagado

  pinMode(pinVent, OUTPUT);                       // Se configura el ventilador como salida
  digitalWrite (pinVent, LOW);                    // Se inicia el ventilador OFF

  pinMode(pinRelay, OUTPUT);                      // Se configura el Relay como salida
  digitalWrite (pinRelay, LOW);                   //Se inicia el Rele en OFF

  pinMode(pinLedSlider, OUTPUT);                  // Configuramos pin Luz Slider como salida
  digitalWrite(pinLedSlider, LOW);                // Iniciamos el Led Luz Slider como apagado

  servo.attach(10);                              // Definimos el pin del Servo
  servo.write(10);  //ready

  pinMode(pinAviso, OUTPUT);                    // Configuramos el pin del Led de aviso
  pinMode(pinSirena, OUTPUT);                   // Configuramos el pin de laslida de la sirena
  digitalWrite(pinAviso, LOW);
  digitalWrite(pinSirena, LOW);

}

/*Funcion calibrado LDR*/

void calibraLDR()
{

  Serial.println("Inicializando Calibracion LDR");        //Inicio
  digitalWrite(pinLedCalibra, HIGH);
  int i = 0;
  while (millis() < 5000)
  {
    int lecturaValorLDR = analogRead(pinLDR);

    if (lecturaValorLDR < minLDR)                         // Si la lectura es menor que el valor 0:
    {
      minLDR = lecturaValorLDR;
    }

    if (lecturaValorLDR > maxLDR)                         // Si la lectura es mayor que 255:
    {
      maxLDR = lecturaValorLDR;
    }
  }

  digitalWrite(pinLedCalibra, LOW);

  if (debugCalibraLDR) Serial.print("Nivel Minimo de Luz: ");
  if (debugCalibraLDR) Serial.println(minLDR);
  if (debugCalibraLDR) Serial.print("Nivel Maximo de Luz: ");
  if (debugCalibraLDR) Serial.println(maxLDR);
  Serial.println("Calibracion LDR OK");
  delay(100);                                               // retardo y fin del calibrado

}


/*********************************************** FUNCIONES PRINCIPALES******************************************************/

// Lectura de comando

boolean lecturaSerial1()
{
  if (Serial1.available() > 0)                               // Miro si hay algo en el Serial (Si no hay, continua con fAutomaticas).
  {
    lecturaComando = Serial1.read();                         // Lectura del valor
    if (debug) Serial.print("Comando: ");                   // Se imprime el valor
    if (debug) Serial.println(lecturaComando);              // Se imprime el valor
    actuaciones();
  }
}


// Funcion para la Gestion de las funciones automaticas

void fAutomaticas()
{
  if (ledLuzAuto) controlLedLuz();          // Si se inicia Led Luz automatico, control automatico de Led Luz true
  if (ventAuto)   controlVent();            // Si se inicia Ventilador automatico, control automatico true
  if (relayAuto)  controlRelay();           // Si se inicia el control automático del relay, infrared true
  if (sirenaAuto) controlAlarma();          // Para iniciar el control automatico de la alarma
}


/*FUNCIONES SECUNDARIAS*/


// Gestiona las actuaciones en funcion de la lectura

void actuaciones()
{
  /*Luces Led*/
  if ((lecturaComando == 'l') && (!ledLuzAuto)) ledLuzOFF();            // Si 'l' y manual: Enciendo Led Luz
  else if ((lecturaComando == 'L') && (!ledLuzAuto)) ledLuzON();        // Si 'L' y manual: Apago Led Luz
  else if (lecturaComando == 'a') modoLedLuz(false);                    // Si 'a' Led Luz Manual
  else if (lecturaComando == 'A') modoLedLuz(true);                     // Si 'A' Led Luz Automatico

  /*Ventilador*/
  else if ((lecturaComando == 'v') && (!ventAuto)) ventOFF();           // Si 'v' y manual: Enciendo Led Luz
  else if ((lecturaComando == 'V') && (!ventAuto)) ventON();            // Si 'V' y manual: Apago Led Luz
  else if (lecturaComando == 'b') modoVentAuto(false);                  // Si 'b' Led Luz Manual
  else if (lecturaComando == 'B') modoVentAuto(true);                   // Si 'B' Led Luz Automatico


  /*Enchufes - Rele*/
  else if ((lecturaComando == 'r') && (!relayAuto)) relayOFF();                // Si 'r' y manual: Activo enchufe
  else if ((lecturaComando == 'R') && (!relayAuto)) relayON();         // Si 'R' y manual: Desctivo enchufe
  else if (lecturaComando == 'e') modoRelayAuto(false);                  // Si 'e' Activacion para uso infrarojo
  else if (lecturaComando == 'E') modoRelayAuto(true);                   // Si 'E' Desactivacion para infrarojo


  /* Encendido por Slider*/
  else if (lecturaComando == 'D') accionLedSlider(true);                // Si 'S' Leemos el valor del Slider
  else if (lecturaComando == 'd') accionLedSlider(false);               // Si 's' apagamos Led Slider

  /* Apertura de puerta*/
  else if ((lecturaComando == 'P') && (!puertaAuto)) puertaOpen();                // Si 'r' y manual: Activo enchufe
  else if ((lecturaComando == 'p') && (!puertaAuto)) puertaClose();         // Si 'R' y manual: Desctivo enchufe

  /*Alarma*/
  else if (lecturaComando == 's') modoAlarmaAuto(false);                  // Desarmado
  else if (lecturaComando == 'S') modoAlarmaAuto(true);                   // Armado




  // Añadir nuevos comandos y llamadas a nuevas funciones

  else if (debug) Serial.println("Comando incorrecto");                  // Si no ningun comando no hace nada
  vaciaSerial();

}

// Vaciado del Serial

void  vaciaSerial()
{
  while (Serial1.available() > 0) Serial1.read();
  if (debug) Serial.println("Serial vaciado ... listo");
}


/************************************************* FUNCIONES de ACCIONES************************************************************/

// Funciones que apaga/enciende Led Luz

void ledLuzOFF()  //APAGA Led Luz
{
  if (debugLedLuz) Serial.println("Led Luz -> OFF");
  digitalWrite(pinLedLuz, LOW);
}

void ledLuzON()  //ENCIENDE Led Luz
{
  if (debugLedLuz) Serial.println("Led Luz -> ON");
  digitalWrite(pinLedLuz, HIGH);
}

// Funcion que asigna el modo de funcionamiento del Led Luz

void modoLedLuz(boolean modoLuz)
{
  if (modoLuz)
  {
    if (debugLedLuz) Serial.println("Led Luz automatico: ON");
    ledLuzAuto = true;                   // Si 'A' Led Luz Automatico
  }
  else
  {
    if (debugLedLuz) Serial.println("Led Luz automatico: OFF ");
    ledLuzAuto = false;                  // Si 'a' Led Luz Manual
    ledLuzOFF();                         // al pasar al modo manual, vuelve a estado false
  }
}

// Funciones que regula el Ventilador


void ventON()
{
  if (debugVent) Serial.println (" Ventilador : ON");
  digitalWrite(pinVent, HIGH);
}

void ventOFF ()
{
  if (debugVent) Serial.println (" Ventilador : OFF");
  digitalWrite (pinVent, LOW);
}

void modoVentAuto(boolean modoVent)
{
  if (modoVent)
  {
    if (debugVent) Serial.println("Ventilador automatico: ON");
    ventAuto = true;                   // Si 'B' Led Luz Automatico
  }
  else
  {
    if (debugVent) Serial.println("Ventilador automatico: OFF ");
    ventAuto = false;                  // Si 'b' Led Luz Manual
    ventOFF();                         // al pasar al modo manual, vuelve a estado false
    lcd.clear();
  }
}

//Funcion que regula el enchufe - rele -

void relayON()
{
  if (debugRelay) Serial.println (" Enchufe: Activado");
  digitalWrite(pinRelay, HIGH);
}
void relayOFF ()
{
  if (debugRelay) Serial.println (" Enchufe: Desactivado");
  digitalWrite (pinRelay, LOW);
}
void modoRelayAuto(boolean modoRelay)
{
  if (modoRelay)
  {
    if (debugRelay) Serial.println("Enchufe: Activado ");
    relayAuto = true;                   // Si 'R' Activacion enchufe
  }
  else
  {
    if (debugRelay) Serial.println("Enchufe: Desactivado ");
    relayAuto = false;                  // Si 'r' Desactivacion enchufe
    relayOFF();                         // al pasar al modo manual, vuelve a estado false
  }
}

// Funciones que regula Led Slider

void accionLedSlider(boolean actuar)
{
  if (actuar)                                                              // Si recibimos orden de encender
  {
    if (lecturaValorLedSlider()) analogWrite(pinLedSlider, lecturaValor);  // Si la letura del valor es correcta regula el led
  }
  else
  {
    if (debug) Serial.println("Led Slider -> OFF ");
    digitalWrite(pinLedSlider, LOW);                                    // Si recibimos orden de apagar-> Apagamos
  }
}

// Funcion que lee el valor para el Led Slider

boolean lecturaValorLedSlider()
{
  delay(10);                                                      // Para que realice bien la lectura del Serial.parseInt()

  if (Serial1.available() > 0)                                     // Si hay datos
  {
    lecturaValor = Serial1.parseInt();                             // Leo Entero del Serial

    if (debug) Serial.print("Valor leido led Slider: ");          // Imprimo dato
    if (debug) Serial.println(lecturaValor);                      // Imprimo dato

    if ((lecturaValor < 0) || (lecturaValor > 255))               // Si valor erroneo debe estar entre (1-255)
    {
      if (debug) Serial.print("Valor incorrecto (1-255): ");      // Imprimo dato
      if (debug) Serial.println(lecturaValor);                    // Imprimo dato

      return false;                                               // Devuelvo false - error en comando
    }
    else return true;                                             // Si valor correcto - Devuelvo true - Comando OK completo
  }
  else                                                            // Si no hay datos
  {
    if (debug) Serial.println("Comando incompleto - S + numero (1-255)");      // Imprimo dato

    return false;                                                 // Devuelvo false - comando incompleto
  }

}

// Funcion que lee el accionamiento de la puerta

void puertaOpen()
{
  if (debugPuerta) Serial.println ("Puerta abierta ");
  {
    servo.write(175);  // Abre la puerta a 175º
  }
}

void puertaClose()
{
  if (debugPuerta) Serial.println ("Puerta cerrada ");
  {
    servo.write(2);  // Cierro la puerta
  }
}

void modoAlarmaAuto (boolean modoAlarma)
{
  if (modoAlarma)
  {
    if (debugAlarma) Serial.println("Sistema Armado ");
    sirenaAuto = true;                   // Si 'S' Armado alarma
  }
  else
  {
    if (debugAlarma) Serial.println("Sistema Desarmado ");
    sirenaAuto = false;                  // Si 's' Desarmado Alarma
    lcd.clear();
  }

}


/************************************************************************************************************************
                                                  FUNCIONES AUTOMATICAS
*************************************************************************************************************************/


// Controlde LedLuz

void controlLedLuz()
{
  int lecturaValorLDR = analogRead(pinLDR);                       // Leo el valor de la LDR.
  int valorLed = map(lecturaValorLDR, minLDR, maxLDR, 255, 0);    // Lo mapeo a un valor entre 0 y 255.
  analogWrite(pinLedLuz, valorLed);                               // Enciendo el pinLedLuz con el valor leido.
  if (debugValLDR) Serial.print("Valor LDR: ");                   // Imprimo dato.
  if (debugValLDR) Serial.print(lecturaValorLDR);
  if (debugValLDR) Serial.print("\t Valor Led: ");                // Imprimo dato.
  if (debugValLDR) Serial.println(valorLed);
  delay(500);
}


//Control del Ventilador

void controlVent()

{
  float tempC = dht.readTemperature();                        //Variable para leer la temperatura en ºC
  float tempFar = dht.readTemperature();                      //Variable para leer la temperatura en ºF (Solo para puerto Serial)

  if (isnan(tempC) || isnan(tempFar)) {                       //Funcion para notificar fallo en el sensor
    Serial.println("No se detecta el sensor!");
    return;
  }

  float hi = dht.computeHeatIndex(tempFar, tempC);
  lcd.clear();
  Serial.print("Temperatura: ");                              // imprimir la palabra "Temperatura" puerto serial
  lcd.print("Temperatura (*C): ");                            // imprimir la palabra "Temperatura" en pantalla LCD
  lcd.setCursor(3, 1);                                        // Posicion en la pantalla LCD
  Serial.print(tempC);                                        // Imprimir temperatura ºC en Serial
  lcd.print(tempC);                                           // Imprimir temperatura ºC en LCD
  Serial.print(" *C ");                                       // Indicar que son ºC en la pantalla LCDb
  lcd.setCursor(6, 2);
  Serial.print(tempFar);//Imprimir temperatura ºC en Serial
  Serial.print(" *F\t");
  Serial.print("Heat index: ");
  Serial.print(hi);
  Serial.println(" *F");
  delay(1000);

  if (tempC >= 20)                                            // Si la temperatura es superior a los 20ºC
  {
    digitalWrite (pinVent, HIGH);                                 // encender el ventilador
  }
  else
  {
    digitalWrite(pinVent, LOW);                                   // Apagar el ventilador
  }
}


//Control del enchufe - Rele -

void controlRelay ()
{
  results.value = 0;
  if (irrecv.decode(&results)) {
    Serial.println(results.value, HEX);             // imprime el valor en codigo hexadecimal
    irrecv.resume();                                      // Se preparar para recibir  el siguiente valor
  }
  while (results.value == 0xC)  //comparamos el valor recibido con un valor seleccionado
  {
    digitalWrite(pinRelay, HIGH);                     //si es verdadero pondra en estado alto el pin 7
    delay(100);                                //espera 100ms antes de tomar el siguiente dato

    if (irrecv.decode(&results))
    {
      Serial.println(results.value, HEX);
      irrecv.resume();
    }
  }
  digitalWrite(pinRelay, LOW);             //Al momento que se deja de cumplir la condicion pasa a estado bajo
}



// FUNCIONES DE ALARMA


void controlAlarma() {

  Serial.print ("distancia en cm:");
  Serial.println(ultra.distanceRead());

  if (ultra.distanceRead() < 10)
  {
    digitalWrite(pinAviso, HIGH);
    digitalWrite(pinSirena, HIGH);
    lcd.print("Alarma entrada");
    lcd.setCursor(3, 1); 
    Serial.println("------------------------");
    Serial.println("** MOVIMIENTO DETECTADO **");
    Serial.println("------------------------");
    Serial.println("");
    delay(5000);
  }

  else
  {
    digitalWrite(pinAviso, LOW);
    digitalWrite(pinSirena, LOW);
  }



}






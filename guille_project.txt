
/**********************************************************************************************
                                              LIBRERIAS
***********************************************************************************************/
//Librería para el receptor IR
#include <boarddefs.h>
#include <IRremote.h>
#include <IRremoteInt.h>
#include <ir_Lego_PF_BitStreamEncoder.h>

#include <Wire.h>

//Libreria para el sensor DHT11
#include "DHT.h"

// Librería para el cristal LCD
#include <LiquidCrystal_I2C.h>

//Libreria que controla el Servo
#include <Servo.h>

//Libreria para el sensor ultrasonido
#include <Ultrasonic.h>

/**********************************************************************************************
                                              VARIABLES
 **********************************************************************************************/

/*Digitales - PWD*/

// Leds-Luces
const byte pinLedCalibra = 12;                  // Pin para calibración LDR
const byte pinLedLuz = 2;                       // Pin Led ap.1


// Ventilador (ventilador)
byte pinVent = 4;                                // Pin para ventilador ap.2
//Para la funcion automatica, lo realizaremos con el sensor DHT11


// Enchufes - Rele
const byte pinRelay = 23;                       // Pin Rele ap.4


//Slider
const byte pinLedSlider = 3;                    // Pin Led ap.3

//Led RGB

const byte pinRGBRojo = 5;                      //Pin para RGB Rojo ap. 4
const byte pinRGBVerde = 6;                     //Pin para RGB Verde ap. 4
const byte pinRGBAzul = 7;                      //Pin para RGB Azul ap. 4

// Persianas
byte persianaUp = 36;                           // Pin de subida de persiana por pulsador ap. 6
byte persianaDown = 37;                         // Pin de bajada de persiana por pulsadorap. 6

//Alarma
int pinAviso = 34;                              // Pin led de aviso alarma ap.8
int pinSirena = 35;                             // Pin que activa ña sirena ap. 8
int retardoAlarma = 10;                         // Conteo para retardo de salida al activar la alarma

/*Analogicas*/

const byte pinLDR = A0;                         // Pin analogico para los vaores del LDR


// Variables booleanas

boolean ledLuzAuto = false;                     // PinLed modo funcionamiento false: Manual - true: automatico -> inicalmente manual
boolean ventAuto = false;                       // Pin para el ventilador - false: manual - true: automatico -> inicalmente manual
boolean relayAuto = false;                      // Pin para el enchufe - false: manual - true: automatico -> inicalmente manual y posicion cerrada
boolean puertaAuto = false;                     // Pin para la puerta - false: cerrado
boolean sirenaAuto = false;                     // Pin para la sirena - false: alarma desactivada


// Variables de las librerias

#define RECV_PIN 11                             // Pin al que conectamos el receptor de IR
IRrecv irrecv(RECV_PIN);
decode_results results;

#define DHTPIN 22                               // Define el pin se salida para el sensor DHT11
#define DHTTYPE DHT11                           // Define el tipo de sensor a la librería
DHT dht(DHTPIN, DHTTYPE);                       // Variable del dht

LiquidCrystal_I2C lcd(0x27, 16, 2);             // Codigo del LCD para que lo reconozca el arduino y medida de la pantalla (16x2)

Servo servo;                                    // Indica la variable del servo

Ultrasonic ultra (31, 30);                      // Pines para sensor de ultrasonido

/********************************* Variables principales de programa*******************************************************************/

char lecturaComando;                            // Variable donde guardamos la lectura del comando
int lecturaValor;                               // Variable donde guardamos el valor de la lectura
int lecturaAngulo;                              // Variable en la que leemos a que angulo esta la puerta abierta
float tempC;                                    // Variable para leer la temperatura en ºC
float tempFar;                                  // Variable para leer la temperatura en ºF (Solo para puerto Serial)



/********************************* Variable para imprimir valores - Debug *************************************************************/

boolean debug = false;                           // Activamos o desactivos el debug
boolean debugLedLuz = false;                     // Activamos o desactivamos debug de los LEDS
boolean debugModoLedLuz = false;                 // Activamos o desactivamos el debug del led: Manual/Automatico.
boolean debugValLDR = false;                     // Activamos o desactivamos el debug de los Valores la LDR.
boolean debugCalibraLDR = false;                 // Activamos o desactivamos el debug de la calibracion LDR.
boolean debugVent = false;                       // Activamos o desactivamos el debug del Ventilador: Manual/Automatico
boolean debugTemp = false;                       // Activamos o desactivamos el debug de la temperatura
boolean debugRGB = false;                        // Activamos o desactivamos el debug de los sliders RGB
boolean debugRelay = false;                      // Activamos o desactivamos el debug del Rele
boolean debugPersiana = false;                   // Activamos o desacivamos el debug de la persiana
boolean debugPuerta = false;                     // Activamos o desactivamos el debug del Servo
boolean debugRangoPuerta = false;                     // Activamos o desactivamos el debug del control de la apertura de puerta
boolean debugAlarma = false;                     // Activamos o desactivamos el debug de la alarma

/********************************** Variables para la configuracion del LDR*************************************************************/

int maxLDR = 0;
int minLDR = 1024;
int temperaturaInicio = 15;

/****************************************************************************************************************************************
                                                       PROGRAMA PRINCIPAL
*****************************************************************************************************************************************/

// Funciones de configuracion

void setup()
{
  Serial.begin(9600);
  Serial1.begin(9600);                            // Activamos el puerto Serial1 a 9600 baudios
  dht.begin();                                    // Iniciamos sensor DHT
  Wire.begin();
  lcd.backlight();
  lcd.init();
  irrecv.enableIRIn();                            // Comienza a recibir los datos del IR
  configuraPines();                               // Funcion quie configura los pines como Entrada o salida
  calibraLDR();                                   // Funcion para la calibración del

}

// Funcion principal

void loop()
{
  lecturaSerial1();                               // Lectura de comando del Serial y Actuaciones
  fAutomaticas();                                 // Realiza las acciones automaticas


}


/*****************************************************************************************************************************************
                                                               FUNCIONES
 *****************************************************************************************************************************************/

// CONFIGURACION

// Funcion de configuracion de pines

void configuraPines()
{
  /* Para las entradas*/

  pinMode(pinLedLuz, INPUT);                        // Fijamos pin de entrada para el LDR
  pinMode (pinVent, INPUT);                         // Fijamos pin de entrada para el Ventilador

  /*Para las salidas*/

  pinMode(pinLedLuz, OUTPUT);                       // Configuramos pin Luz como salida
  digitalWrite(pinLedLuz, LOW);                     // Iniciamos el Led Luz como OFF


  pinMode(pinLedCalibra, OUTPUT);                   // Pin de calibrado del LDR
  digitalWrite (pinLedCalibra, LOW);                // Inicia el led de calibraco apagado

  pinMode(pinVent, OUTPUT);                         // Se configura el ventilador como salida
  digitalWrite (pinVent, LOW);                      // Se inicia el ventilador OFF

  pinMode(pinRelay, OUTPUT);                        // Se configura el Relay como salida
  digitalWrite (pinRelay, LOW);                     // Se inicia el Rele en OFF

  pinMode(persianaUp, OUTPUT);                      // Se configura el el pin del boton de la persiana como salida
  digitalWrite(persianaUp, LOW);                    // Se inicia el boton de la persiana en OFF

  pinMode(persianaDown, OUTPUT);                    // Se configura el el pin del boton de la persiana como salida
  digitalWrite(persianaDown, LOW);                  // Se inicia el boton de la persiana en OFF


  pinMode(pinLedSlider, OUTPUT);                    // Configuramos pin Luz Slider como salida
  digitalWrite(pinLedSlider, LOW);                  // Iniciamos el Led Luz Slider como apagado

  pinMode (pinRGBRojo, OUTPUT);                     // Configuramos RGB rojo Luz Slider como salida
  digitalWrite(pinRGBRojo, LOW);                    // Iniciamos el RGB rojo como apagado

  pinMode (pinRGBVerde, OUTPUT);                    // Configuramos RGB verde Luz Slider como salida
  digitalWrite(pinRGBVerde, LOW);                   // Iniciamos el RGB verde como apagado

  pinMode (pinRGBAzul, OUTPUT);                     // Configuramos RGB azul Luz Slider como salida
  digitalWrite(pinRGBAzul, LOW);                    // Iniciamos el RGB azul como apagado

  servo.attach(13);                                 // Definimos el pin del Servo
  servo.write(13);  //ready
  delay(950);

  pinMode(pinAviso, OUTPUT);                        // Configuramos el pin de salida para el led de aviso
  pinMode(pinSirena, OUTPUT);                       // Configuramos el pin de salida para la sirena
  digitalWrite(pinAviso, LOW);                      // Lo iniciamos en apagado
  digitalWrite(pinSirena, LOW);                     // Lo iniciamos en apagado
}

/*Funcion calibrado LDR*/

void calibraLDR()
{

  Serial.println("Inicializando Calibracion LDR");            // Inicio del calibrado
  digitalWrite(pinLedCalibra, HIGH);
  int i = 0;
  while (millis() < 5000)
  {
    int lecturaValorLDR = analogRead(pinLDR);

    if (lecturaValorLDR < minLDR)                             // Si la lectura es menor que el valor 0:
    {
      minLDR = lecturaValorLDR;
    }

    if (lecturaValorLDR > maxLDR)                             // Si la lectura es mayor que 255:
    {
      maxLDR = lecturaValorLDR;
    }
  }

  digitalWrite(pinLedCalibra, LOW);

  if (debugCalibraLDR) Serial.print("Nivel Minimo de Luz: ");
  if (debugCalibraLDR) Serial.println(minLDR);
  if (debugCalibraLDR) Serial.print("Nivel Maximo de Luz: ");
  if (debugCalibraLDR) Serial.println(maxLDR);
  Serial.println("Calibracion LDR OK");
  delay(100);                                                  // Retardo y fin del calibrado

}


/*********************************************** FUNCIONES PRINCIPALES******************************************************/

// Lectura de comando

boolean lecturaSerial1()
{
  if (Serial1.available() > 0)                                // Miro si hay algo en el Serial (Si no hay, continua con fAutomaticas).
  {
    lecturaComando = Serial1.read();                          // Lectura del valor
    if (debug) Serial.print("Comando: ");                     // Se imprime el valor
    if (debug) Serial.println(lecturaComando);                // Se imprime el valor
    actuaciones();
  }
}


// Funcion para la Gestion de las funciones automaticas

void fAutomaticas()
{
  if (ledLuzAuto) controlLedLuz();                            // Si se inicia Led Luz automatico, control automatico de Led Luz true
  if (ventAuto)   controlVent();                              // Si se inicia Ventilador automatico, control automatico true
  if (relayAuto)  controlRelay();                             // Si se inicia el control automático del relay, infrared true
  if (sirenaAuto) controlAlarma();                            // Para iniciar el control automatico de la alarma
}


/*************************************************FUNCIONES SECUNDARIAS****************************************************/


// Gestiona las actuaciones en funcion de la lectura

void actuaciones()
{
  /*Luces Led*/
  if ((lecturaComando == 'l') && (!ledLuzAuto)) ledLuzOFF();                // Si 'l' y manual: Enciendo Led Luz
  else if ((lecturaComando == 'L') && (!ledLuzAuto)) ledLuzON();            // Si 'L' y manual: Apago Led Luz
  else if (lecturaComando == 'a') modoLedLuz(false);                        // Si 'a' Led Luz Manual
  else if (lecturaComando == 'A') modoLedLuz(true);                         // Si 'A' Led Luz Automatico

  /*Ventilador*/
  else if ((lecturaComando == 'v') && (!ventAuto)) ventOFF();               // Si 'v' y manual: Enciendo Led Luz
  else if ((lecturaComando == 'V') && (!ventAuto)) ventON();                // Si 'V' y manual: Apago Led Luz
  else if (lecturaComando == 'b') modoVentAuto(false);                      // Si 'b' Led Luz Manual
  else if (lecturaComando == 'B') modoVentAuto(true);                       // Si 'B' Led Luz Automatico
  else if (lecturaComando == 'T') modoTermostato();                         // Si 'T' Led Luz Automatico


  /*Enchufes - Rele*/
  else if ((lecturaComando == 'r') && (!relayAuto)) relayOFF();             // Si 'r' y manual: Activo enchufe
  else if ((lecturaComando == 'R') && (!relayAuto)) relayON();              // Si 'R' y manual: Desctivo enchufe
  else if (lecturaComando == 'e') modoRelayAuto(false);                     // Si 'e' Activacion para uso infrarojo
  else if (lecturaComando == 'E') modoRelayAuto(true);                      // Si 'E' Desactivacion para infrarojo

  /*Persianas*/
  else if (lecturaComando == 'U') abrePersiana();                           // Si 'U' Subir persiana
  else if (lecturaComando == 'R') cierraPersiana();                         // Si 'D' Bajar persiana
  else if (lecturaComando == 'Z') paraPersiana();                           // Si 'Z' Parada de persiana


  /* Encendido por Slider*/
  else if (lecturaComando == 'D') accionLedSlider(true);                    // Si 'D' Leemos el valor del Slider
  else if (lecturaComando == 'd') accionLedSlider(false);                   // Si 'd' apagamos Led Slider


  /* Encendido del RGB*/
  else if (lecturaComando == 'M') accionRGBSliderRojo(true);                    // Si 'M' Leemos el valor del RGB rojo
  else if (lecturaComando == 'm') accionRGBSliderRojo(false);                   // Si 'd' apagamos Led RGB rojo
  else if (lecturaComando == 'Y') accionRGBSliderVerde(true);                   // Si 'M' Leemos el valor del RGB verde
  else if (lecturaComando == 'y') accionRGBSliderVerde(false);                  // Si 'd' apagamos Led RGB verde
  else if (lecturaComando == 'C') accionRGBSliderAzul(true);                    // Si 'M' Leemos el valor del RGB azul
  else if (lecturaComando == 'c') accionRGBSliderAzul(false);                   // Si 'd' apagamos Led RGB azul


  /* Apertura de puerta*/
  else if ((lecturaComando == 'P') && (!puertaAuto)) puertaOpen();              // Si 'r' y manual: Activo enchufe
  else if ((lecturaComando == 'p') && (!puertaAuto)) puertaClose();             // Si 'R' y manual: Desctivo enchufe
  else if (lecturaComando == 'G') accionServoSlider(true);                      // Si 'G' Leemos el angulo de apertura de la puerta
  else if (lecturaComando == 'g') accionServoSlider(false);                     // Si 'g' apagamos se desactiva la regulacion de la apertura de la puerta

  /*Alarma*/
  else if (lecturaComando == 's') modoAlarmaAuto(false);                        // Si 'S' -  Sistema Armado
  else if (lecturaComando == 'S') modoAlarmaAuto(true);                         // Si 's' - Sistema desarmado



  // Añadir nuevos comandos y llamadas a nuevas funciones

  else if (debug) Serial.println("Comando incorrecto");                         // Si no coincide con ningun comando de actuacion, muestra el mensaje en serial
  vaciaSerial();

}

// Vaciado del Serial

void  vaciaSerial()
{
  while (Serial1.available() > 0) Serial1.read();
  if (debug) Serial.println("Serial vaciado ... listo");
}


/************************************************* FUNCIONES de ACCIONES************************************************************/

// Funciones que apaga/enciende Led Luz

void ledLuzOFF()  //APAGA Led Luz
{
  if (debugLedLuz) Serial.println("Led Luz -> OFF");
  digitalWrite(pinLedLuz, LOW);                                                 // Si 'l' Led Luz OFF
}

void ledLuzON()  //ENCIENDE Led Luz
{
  if (debugLedLuz) Serial.println("Led Luz -> ON");
  digitalWrite(pinLedLuz, HIGH);                                                // Si 'L' Led Luz ON
}

// Funcion que asigna el modo de funcionamiento del Led Luz

void modoLedLuz(boolean modoLuz)
{
  if (modoLuz)
  {
    if (debugLedLuz) Serial.println("Led Luz automatico: ON");
    ledLuzAuto = true;                                                          // Si 'A' Led Luz Automatico
  }
  else
  {
    if (debugLedLuz) Serial.println("Led Luz automatico: OFF ");
    ledLuzAuto = false;                                                         // Si 'a' Led Luz Manual
    ledLuzOFF();                                                                // Al pasar al modo manual, vuelve a false
  }
}

// Funciones que regula el Ventilador


void ventON()
{
  if (debugVent) Serial.println (" Ventilador : ON");
  digitalWrite(pinVent, HIGH);                                                  // Si 'V' Enciende el ventilador
}

void ventOFF ()
{
  if (debugVent) Serial.println (" Ventilador : OFF");
  digitalWrite (pinVent, LOW);                                                  // Si 'v' Apaga el ventilador
}

void modoVentAuto(boolean modoVent)
{
  if (modoVent)
  {
    if (debugVent) Serial.println("Ventilador automatico: ON");
    ventAuto = true;                                                             // Si 'B' Led Luz Automatico
  }
  else
  {
    if (debugVent) Serial.println("Ventilador automatico: OFF ");
    ventAuto = false;                                                             // Si 'b' Led Luz Manual
    ventOFF();                                                                    // Al pasar al modo manual, vuelve a false
    lcd.clear();
  }
}


//Funcion que regula el enchufe - rele -

void relayON()
{
  if (debugRelay) Serial.println (" Enchufe: Activado");
  digitalWrite(pinRelay, HIGH);                                                   // Si 'R' activacion rele manual
}
void relayOFF ()
{
  if (debugRelay) Serial.println (" Enchufe: Desactivado");
  digitalWrite (pinRelay, LOW);                                                   // Si 'r' desactivacion rele manual
}
void modoRelayAuto(boolean modoRelay)
{
  if (modoRelay)
  {
    if (debugRelay) Serial.println("Enchufe: Activado ");
    relayAuto = true;                                                             // Si 'E' activacion enchufe automatico por IR
  }
  else
  {
    if (debugRelay) Serial.println("Enchufe: Desactivado ");
    relayAuto = false;                                                            // Si 'e' desactivacion enchufe automatico por IR
    relayOFF();                                                                   // Al pasar al modo manual, vuelve a estado false
  }
}

// Funciones que regula Led Slider

void accionLedSlider(boolean actuar)
{
  if (actuar)                                                                     // Si recibimos orden de encender
  {
    if (lecturaValorLedSlider()) analogWrite(pinLedSlider, lecturaValor);         // Si la letura del valor es correcta regula el led
  }
  else
  {
    if (debug) Serial.println("Led Slider -> OFF ");
    digitalWrite(pinLedSlider, LOW);                                              // Si recibimos orden de apagar-> Apagamos
  }
}

// Funcion que lee el valor para el Led Slider

boolean lecturaValorLedSlider()
{
  delay(10);                                                                   // Para que realice bien la lectura del Serial.parseInt()

  if (Serial1.available() > 0)                                                 // Si hay datos
  {
    lecturaValor = Serial1.parseInt();                                         // Leo Entero del Serial

    if (debug) Serial.print("Valor leido led Slider: ");                       // Imprimo dato
    if (debug) Serial.println(lecturaValor);                                   // Imprimo dato

    if ((lecturaValor < 0) || (lecturaValor > 255))                            // Si valor erroneo debe estar entre (1-255)
    {
      if (debug) Serial.print("Valor incorrecto (1-255): ");                   // Imprimo dato
      if (debug) Serial.println(lecturaValor);                                 // Imprimo dato

      return false;                                                            // Devuelvo false - error en comando
    }
    else return true;                                                          // Si valor correcto - Devuelvo true - Comando OK completo
  }
  else                                                                         // Si no hay datos
  {
    if (debug) Serial.println("Comando incompleto - S + numero (1-255)");      // Imprimo dato

    return false;                                                              // Devuelvo false - comando incompleto
  }

}

// Funciones que regula RGB Rojo

void accionRGBSliderRojo(boolean actuar)
{
  if (actuar)                                                                  // Si recibimos orden de encender
  {
    if (lecturaRGBRojo()) analogWrite(pinRGBRojo, lecturaValor);               // Si la letura del valor es correcta regula el led
  }
  else
  {
    if (debug) Serial.println("RGB Rojo -> OFF ");
    digitalWrite(pinRGBRojo, LOW);                                              // Si recibimos orden de apagar-> Apagamos
  }
}

// Funcion que lee el valor para el RGB rojo

boolean lecturaRGBRojo()
{
  delay(10);                                                                   // Para que realice bien la lectura del Serial.parseInt()

  if (Serial1.available() > 0)                                                 // Si hay datos
  {
    lecturaValor = Serial1.parseInt();                                         // Leo Entero del Serial

    if (debug) Serial.print("Valor leido RGB Rojo: ");                         // Imprimo dato
    if (debug) Serial.println(lecturaValor);                                   // Imprimo dato

    if ((lecturaValor < 0) || (lecturaValor > 255))                            // Si valor erroneo debe estar entre (1-255)
    {
      if (debug) Serial.print("Valor incorrecto (1-255): ");                   // Imprimo dato
      if (debug) Serial.println(lecturaValor);                                 // Imprimo dato

      return false;                                                            // Devuelvo false - error en comando
    }
    else return true;                                                          // Si valor correcto - Devuelvo true - Comando OK completo
  }
  else                                                                         // Si no hay datos
  {
    if (debug) Serial.println("Comando incompleto - S + numero (1-255)");      // Imprimo dato

    return false;                                                              // Devuelvo false - comando incompleto
  }

}

// Funciones que regula RGB Verde

void accionRGBSliderVerde(boolean actuar)
{
  if (actuar)                                                                  // Si recibimos orden de encender
  {
    if (lecturaRGBVerde()) analogWrite(pinRGBVerde, lecturaValor);             // Si la letura del valor es correcta regula el led
  }
  else
  {
    if (debug) Serial.println("RGB Verde -> OFF ");
    digitalWrite(pinRGBVerde, LOW);                                           // Si recibimos orden de apagar-> Apagamos
  }
}

// Funcion que lee el valor para el RGB Verde

boolean lecturaRGBVerde()
{
  delay(10);                                                                   // Para que realice bien la lectura del Serial.parseInt()

  if (Serial1.available() > 0)                                                 // Si hay datos
  {
    lecturaValor = Serial1.parseInt();                                         // Leo Entero del Serial

    if (debug) Serial.print("Valor leido RGB Verde: ");                        // Imprimo dato
    if (debug) Serial.println(lecturaValor);                                   // Imprimo dato

    if ((lecturaValor < 0) || (lecturaValor > 255))                            // Si valor erroneo debe estar entre (1-255)
    {
      if (debug) Serial.print("Valor incorrecto (1-255): ");                   // Imprimo dato
      if (debug) Serial.println(lecturaValor);                                 // Imprimo dato

      return false;                                                            // Devuelvo false - error en comando
    }
    else return true;                                                          // Si valor correcto - Devuelvo true - Comando OK completo
  }
  else                                                                         // Si no hay datos
  {
    if (debug) Serial.println("Comando incompleto - S + numero (1-255)");      // Imprimo dato

    return false;                                                              // Devuelvo false - comando incompleto
  }

}


// Funciones que regula RGB azul

void accionRGBSliderAzul(boolean actuar)
{
  if (actuar)                                                                  // Si recibimos orden de encender
  {
    if (lecturaRGBAzul()) analogWrite(pinRGBAzul, lecturaValor);      // Si la letura del valor es correcta regula el led
  }
  else
  {
    if (debug) Serial.println("Led Slider -> OFF ");
    digitalWrite(pinRGBAzul, LOW);                                           // Si recibimos orden de apagar-> Apagamos
  }
}

// Funcion que lee el valor para el RGB azul

boolean lecturaRGBAzul()
{
  delay(10);                                                                   // Para que realice bien la lectura del Serial.parseInt()

  if (Serial1.available() > 0)                                                 // Si hay datos
  {
    lecturaValor = Serial1.parseInt();                                         // Leo Entero del Serial

    if (debug) Serial.print("Valor leido RGB azul: ");                         // Imprimo dato
    if (debug) Serial.println(lecturaValor);                                   // Imprimo dato

    if ((lecturaValor < 0) || (lecturaValor > 255))                            // Si valor erroneo debe estar entre (1-255)
    {
      if (debug) Serial.print("Valor incorrecto (1-255): ");                   // Imprimo dato
      if (debug) Serial.println(lecturaValor);                                 // Imprimo dato

      return false;                                                            // Devuelvo false - error en comando
    }
    else return true;                                                          // Si valor correcto - Devuelvo true - Comando OK completo
  }
  else                                                                         // Si no hay datos
  {
    if (debug) Serial.println("Comando incompleto - S + numero (1-255)");      // Imprimo dato

    return false;                                                              // Devuelvo false - comando incompleto
  }

}


// Funcion que regula el accionamiento de las persianas

void abrePersiana()                                                                    // Funcion abrir persiana
{
digitalWrite(persianaUp, HIGH);                                                        // activamos apertura de persiana
digitalWrite(persianaDown, LOW);                                                       // mantener esa funcion desactivada mientra abre persiana
if (debugPersiana) Serial.println("Subiendo persiana");                                // Imprimo dato
}

void cierraPersiana()                                                                  // Funcion cerrar persiana
{
digitalWrite(persianaDown, HIGH);                                                      // activamos cierre de persiana
digitalWrite(persianaUp, LOW);                                                         // Mantener la funcion de abrir persiana mientras este cerrando
}

void paraPersiana()                                                                   // Funcion parar persiana
{
digitalWrite(persianaUp, LOW);                                                        // Desactivamos apertura de persiana
digitalWrite(persianaDown, LOW);                                                      // Desactivamos cierre de persiana
}


// Funcion que lee el accionamiento de la puerta

void puertaOpen()
{
  if (debugPuerta) Serial.println ("Puerta abierta ");
  {
    servo.write(175);                                                                  // Abre la puerta a 175º
  }
}
void puertaClose()
{

  if (debugPuerta) Serial.println ("Puerta cerrada ");
  {
    servo.write(2);                                                                     // Cierro la puerta
  }
}


// Funcion de regulación de la puerta

void accionServoSlider(boolean actuar)

{
  if (actuar)                                                                  // SI se ejecuta el comando
  {
    if (lecturaValorAngulo())servo.write(lecturaAngulo);                      // si la lectura esta dentro del rango, abre la puerta
  }
  else
  {
    if (debugPuerta) Serial.println("Regulacion de puerta OFF");              // Desactiva la funcion
    servo.write(2);                                                           // Cierra la puerta
  }
}

// Funcion que lee el valor para el angulo de la puerta

boolean lecturaValorAngulo()
{
  delay(10);                                                                   // Para que realice bien la lectura del Serial.parseInt()

  if (Serial1.available() > 0)                                                 // Si hay datos
  {
    lecturaAngulo = Serial1.parseInt();                                         // Leo Entero del Serial

    if (debug) Serial.print("Valor leido led Slider: ");                       // Imprimo dato
    if (debug) Serial.println(lecturaAngulo);                                   // Imprimo dato

    if ((lecturaAngulo < 1) || (lecturaAngulo > 179))                            // Si valor erroneo debe estar entre (1-179)
    {
      if (debug) Serial.print("Valor incorrecto (1-179): ");                   // Imprimo dato
      if (debug) Serial.println(lecturaAngulo);                                 // Imprimo dato

      return false;                                                            // Devuelvo false - error en comando
    }
    else return true;                                                          // Si valor correcto - Devuelvo true - Comando OK completo
  }
  else                                                                         // Si no hay datos
  {
    if (debug) Serial.println("Comando incompleto - S + numero (1-179)");      // Imprimo dato

    return false;                                                              // Devuelvo false - comando incompleto
  }

}


//Funciones que regulan la alarma


void modoAlarmaAuto (boolean modoAlarma)
{
  if (modoAlarma)
  {

    if (debugAlarma)
    {
      Serial.println("Sistema arma: Retardo de salida");              // Imprime en el serial el inicio del retardo de salida
      for (int i = 0; i <= retardoAlarma; i++) {                      // Bucle for para hacer el incremento del conteo
        Serial.print(((i * 10) / retardoAlarma));                     // Hace e imprime en el incremento del retardo
        Serial.println(" Tiempo retardo");                            // Imprime en la parnalla el tiempo de retardo de salida
        delay(1000);                                                  // Delay que se usa para que el conteo se haga por segundo
      }

    }
    Serial.println("Sistema Armado ");                                // Imprime en serial el armado exitoso
    sirenaAuto = true;                                                // Si 'S' Armado alarma
    lcd.print("Alarma activada ");                                    // Imprime en la pantalla LCD el estado de la alarma
    lcd.setCursor(3, 1);

  }
  else
  {
    if (debugAlarma) Serial.println("Sistema Desarmado ");
    sirenaAuto = false;                                               // Si 's' Desarmado Alarma
    lcd.clear();                                                      // Limpia la pantalla por si hay algun mensaje previo
    lcd.print("Alarma desactivada ");                                 // Refleja en la pantalla el mensaje de desarmado exitoso
    lcd.setCursor(3, 1);
    delay(3000);                                                      // Mantiene el mensaje durante un tiempo
    lcd.clear();                                                      // Limpia la pantalla
    digitalWrite(pinAviso, LOW);                                      // Desactivada la alarma, se apaga el pin
    digitalWrite(pinSirena, LOW);                                     // Desactivada la alarma, se apaga la sirena
  }

}


/************************************************************************************************************************
                                                  FUNCIONES AUTOMATICAS
*************************************************************************************************************************/


// Controlde LedLuz

void controlLedLuz()
{
  int lecturaValorLDR = analogRead(pinLDR);                                      // Leo el valor de la LDR.
  int valorLed = map(lecturaValorLDR, minLDR, maxLDR, 255, 0);                   // Lo mapeo a un valor entre 0 y 255.
  analogWrite(pinLedLuz, valorLed);                                              // Enciendo el pinLedLuz con el valor leido.
  if (debugValLDR) Serial.print("Valor LDR: ");                                  // Imprimo dato.
  if (debugValLDR) Serial.print(lecturaValorLDR);                                // Lee el valor del LDR
  if (debugValLDR) Serial.print("\t Valor Led: ");                               // Imprimo dato.
  if (debugValLDR) Serial.println(valorLed);
  delay(500);
}


//Control del Ventilador

void controlVent()

{
  tempC = dht.readTemperature();                                                  //Variable para leer la temperatura en ºC
  tempFar = dht.readTemperature();                                                //Variable para leer la temperatura en ºF (Solo para puerto Serial)

  if (isnan(tempC) || isnan(tempFar)) {                                           //Funcion para notificar fallo en el sensor
    Serial.println("No se deteretardoAlarmaa el sensor!");
    return;
  }

  float hi = dht.computeHeatIndex(tempFar, tempC);
  lcd.clear();
  Serial.print("Temperatura: ");                                                   // imprimir la palabra "Temperatura" puerto serial
  lcd.print("Temperatura (*C): ");                                                 // imprimir la palabra "Temperatura" en pantalla LCD
  lcd.setCursor(3, 1);                                                             // Posicion en la pantalla LCD
  Serial.print(tempC);                                                             // Imprimir temperatura ºC en Serial
  lcd.print(tempC);                                                                // Imprimir temperatura ºC en LCD
  Serial.print(" *C ");                                                            // Indicar que son ºC en la pantalla LCDb
  lcd.setCursor(6, 2);
  Serial.print(tempFar);//Imprimir temperatura ºC en Serial
  Serial.print(" *F\t");
  Serial.print("Heat index: ");
  Serial.print(hi);
  Serial.println(" *F");
  delay(1000);

  if (tempC >= temperaturaInicio)                                                   // Si la temperatura es superior a los 20ºC
  {
    digitalWrite (pinVent, HIGH);                                                   // encender el ventilador
  }
  else
  {
    digitalWrite(pinVent, LOW);                                                     // Apagar el ventilador
  }
}
// Control de la temperatura

boolean modoTermostato()
{
  delay(10);                                                                        // Para que realice bien la lectura del Serial.parseInt()

  if (Serial1.available() > 0)                                                      // Si hay datos
  {
    temperaturaInicio = Serial1.parseInt();                                         // Leo Entero del Serial

    if (debug) Serial.print("Valor leido de temperatura: ");                        // Imprimo dato
    if (debug) Serial.println(temperaturaInicio);                                   // Imprimo dato

    if ((temperaturaInicio < 15) || (temperaturaInicio > 50))                       // Si valor erroneo debe estar entre (15*C- 50*C)
    {
      if (debug) Serial.print("Valor incorrecto (15*C- 50*C): ");                   // Imprimo dato
      if (debug) Serial.println(temperaturaInicio);                                 // Imprimo dato

      return false;                                                                 // Devuelvo false - error en comando
    }
    else return true;                                                               // Si valor correcto - Devuelvo true - Comando OK completo
  }
  else                                                                              // Si no hay datos
  {
    if (debug) Serial.println("Comando incompleto - S + numero (15*C- 50*C)");      // Imprimo dato

    return false;                                                                   // Devuelvo false - comando incompleto
  }

}

//Control del enchufe - Rele -

void controlRelay ()
{
  results.value = 0;
  if (irrecv.decode(&results)) {
    Serial.println(results.value, HEX);                           // Imprime el valor en codigo hexadecimal
    irrecv.resume();                                              // Se preparar para recibir  el siguiente valor
  }
  while (results.value == 0xC)                                    // Comparamos el valor recibido con un valor seleccionado
  {
    digitalWrite(pinRelay, HIGH);                                 // Si es verdadero pondra en estado alto el pin 7
    delay(100);                                                   // Espera 100ms antes de tomar el siguiente dato

    if (irrecv.decode(&results))                                  // Este if es para ver en el puerto Serial si hay deteccion del mando
    {
      Serial.println(results.value, HEX);
      irrecv.resume();
    }
  }
  digitalWrite(pinRelay, LOW);                                    // Al momento que se deja de cumplir la condicion pasa a estado bajo
}


// Funciones de la alarma

void controlAlarma() {

  Serial.print ("distancia en cm:");                      // Marcamos la unidad de medida del sensor
  Serial.println(ultra.distanceRead());

  if (ultra.distanceRead() < 10)                          // si alguien se aproxima a la distancia configurada:
  {
    digitalWrite(pinAviso, HIGH);                         // Enciende Led Sirena
    digitalWrite(pinSirena, HIGH);                        // Enciende zumbador sirena
    lcd.clear();
    lcd.print("Alarma entrada");                          // Indica en la pantalla El sensor que ha saltado
    lcd.setCursor(3, 1);
    Serial.println("------------------------");
    Serial.println("** MOVIMIENTO DETECTADO **");         // Aviso del salto en el puerto serial
    Serial.println("------------------------");
    Serial.println("");
    delay(5000);                                          // Este dalay mantiene en funcionamiento el salto de alarma, lo normal en estos dispositivos es que sea de 3 a 5 min..
  }
  else                                                    // Despues de pasado ese tiempo
  {
    digitalWrite(pinAviso, LOW);                          // Apaga Led Sirena
    digitalWrite(pinSirena, LOW);                         // Apaga Sirena, y Rearma.
  }
}
